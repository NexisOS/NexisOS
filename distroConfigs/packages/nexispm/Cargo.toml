[package]
name = "nexispm"
version = "0.1.0"
edition = "2021"
authors = ["Kyle Gortych <kyle.gortych.dev@gmail.com>"]
description = "Declarative system package manager for NexisOS with optimized store operations, refcounting, and generation rollbacks"
license = "GPL-3.0-or-later"
repository = "https://github.com/NexisOS/NexisOS"
homepage = "https://github.com/NexisOS/NexisOS"
documentation = "https://github.com/NexisOS/NexisOS"
readme = "README.md"
keywords = ["package-manager", "linux", "declarative", "nixos-like", "rollback"]
categories = ["command-line-utilities", "development-tools", "os"]

[lib]
name = "nexispm"
path = "src/lib.rs"

[[bin]]
name = "nexis"
path = "src/main.rs"

[dependencies]
# CLI and configuration
clap = { version = "4.4", features = ["derive", "env", "color"] }
serde = { version = "1.0", features = ["derive", "rc"] }
toml = "0.8"
toml_edit = "0.22"
config = { version = "0.14", optional = true }
tera = { version = "1.19", optional = true }

# Validation & diagnostics
schemars = { version = "0.8", features = ["serde"], optional = true }
serde_valid = { version = "0.15", features = ["derive"], optional = true }
miette = { version = "7", features = ["fancy"] }
thiserror = "1.0"

# Storage backend - RocksDB with optimized features
rocksdb = { 
    version = "0.22", 
    features = [
        "multi-threaded-cf",
        "portable", 
        "bloom", 
        "zstd", 
        "lz4"
    ] 
}

# Async and networking
tokio = { version = "1", features = ["rt-multi-thread", "macros", "fs", "process", "io-util", "signal", "time", "net"] }
reqwest = { version = "0.12", features = ["stream", "rustls-tls", "gzip", "brotli", "hickory-dns"] }
futures = "0.3"

# Hashing and cryptography
blake3 = { version = "1", features = ["rayon"] }
xxhash-rust = { version = "0.8", features = ["xxh3"], optional = true }
ahash = { version = "0.8", optional = true }

# Graph algorithms for dependency resolution
petgraph = "0.6"
merkle-cbt = { version = "0.3" }

# Git operations and version parsing
git2 = { version = "0.18", optional = true }
semver = { version = "1.0", optional = true }
gix = { version = "0.57", optional = true }

# Compression and packaging
tar = "0.4"
zstd = { version = "0.13", features = ["pkg-config"] }
lz4 = { version = "1.24", optional = true }
zip = { version = "0.6", optional = true }
bzip2 = { version = "0.4", optional = true }
flate2 = { version = "1.0", optional = true }

# Filesystem and directory management
walkdir = "2.5"
tempfile = "3.10"
xattr = "1.3"
libc = "0.2"
camino = "1.1"
fs-err = "2"
notify = "6.1"
reflink-copy = { version = "0.1", optional = true }
fs_extra = { version = "1.3", optional = true }
path-clean = { version = "1.0", optional = true }
dunce = { version = "1.0", optional = true }
file-guard = { version = "0.2", optional = true }

# Minimal Unix system calls and user management
rustix = { version = "0.38", optional = true }
file-mode = { version = "0.1", optional = true }
uzers = { version = "0.11", optional = true }
caps = { version = "0.5", optional = true }
envmnt = { version = "0.10", optional = true }
shell-words = { version = "1.1", optional = true }

# Hardware detection and system information
sysinfo = { version = "0.29", optional = true }
regex = { version = "1.10", optional = true }

# SELinux integration
selinux = { version = "0.4" }
selinux-sys = { version = "0.6" }

# Dinit service management
ini = "1.3"
handlebars = { version = "5.1", optional = true }
indexmap = { version = "2.2", optional = true }
once_cell = "1.19"
url = { version = "2.5", optional = true }

# Build system integration
cmake = { version = "0.1", optional = true }
pkg-config = { version = "0.3", optional = true }
cc = { version = "1.0", optional = true }

# Logging and errors
anyhow = "1.0"
log = "0.4"
env_logger = "0.11"
tracing = { version = "0.1", features = ["log"] }
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }

# Date/time
chrono = { version = "0.4", features = ["serde"] }

# Serialization
serde_json = "1.0"
bincode = "1.3"

# Performance
parking_lot = "0.12"
dashmap = { version = "5.5", optional = true }
rayon = { version = "1.10", optional = true }
crossbeam = { version = "0.8", optional = true }
bloom = { version = "0.3", optional = true }
fnv = "1.0"

# CLI UX
console = "0.15"
indicatif = "0.17"
dialoguer = { version = "0.11", optional = true }

# Paths and glob
glob = "0.3"
pathdiff = "0.2"

# AppImage support
appimage = { version = "0.1", optional = true }

# Optional lightweight sandboxing
bubblewrap = { version = "0.1", optional = true }
landlock = { version = "0.3", optional = true }

# Build acceleration (new)
sccache = { version = "0.1", optional = true }

[dev-dependencies]
assert_fs = "1.1"
predicates = "3.1"
tokio-test = "0.4"
proptest = "1.4"
criterion = { version = "0.5", features = ["html_reports"] }

[features]
default = [
    "desktop-profile",
    "grub-integration",
    "validation",
    "selinux-mandatory",
    "enhanced-dinit",
    "compression-zstd",
    "appimage-support",
    "build-systems",
    "runtime-management",
    "archive-support",
    "hardware-detection",
    "version-resolution"
]

desktop-profile = [
    "rocksdb-backend", 
    "interactive", 
    "merkle-trees", 
    "fast-hash",
    "parallel-gc",
    "cow-copy",
    "runtime-management",
    "hardware-detection",
    "version-resolution"
]
server-profile = [
    "rocksdb-backend", 
    "system-info", 
    "parallel-gc", 
    "compression-fast",
    "io-uring",
    "build-systems",
    "enhanced-dinit",
    "hardware-detection",
    "fast-git"
]

rocksdb-backend = []
selinux-mandatory = ["selinux", "selinux-sys"]

version-resolution = ["git2", "semver", "regex", "dashmap"]
fast-git = ["gix", "semver", "regex", "dashmap"]

hardware-detection = ["sysinfo", "regex", "shell-words", "rustix"]
dinit-integration = ["ini", "handlebars", "indexmap", "url"]
enhanced-dinit = ["dinit-integration", "validation", "runtime-management"]

compression-zstd = ["tar", "zstd"]
compression-fast = ["lz4"]

grub-integration = []
systemd-integration = []
layered-config = ["config", "toml_edit"]
templating = ["tera"]
validation = ["schemars", "serde_valid", "miette/fancy"]
caps-support = ["caps", "rustix"]
file-management = ["fs_extra", "path-clean", "dunce", "file-guard"]

appimage-support = ["appimage"]
archive-support = ["zip", "bzip2", "flate2"]

build-systems = ["cmake", "pkg-config", "cc"]

runtime-management = ["rustix", "file-mode", "uzers", "envmnt", "shell-words", "fs_extra", "file-guard"]

sandbox-support = ["bubblewrap", "landlock", "caps"]
enhanced-selinux = ["libselinux-sys"]

parallel-gc = ["rayon", "bloom", "dashmap", "crossbeam"]
fast-hash = ["xxhash-rust", "ahash"]
merkle-trees = ["merkle-cbt"]
cow-copy = ["reflink-copy"]
interactive = ["dialoguer"]
io-uring = ["tokio-uring"]

fast-builds = ["rayon", "crossbeam", "bubblewrap", "sccache"]
version-providers = ["version-resolution"]

extensive-logging = ["tracing-subscriber/json"]
benchmarks = []

[target.'cfg(target_os = "linux")'.dependencies]
tokio-uring = { version = "0.5", optional = true }
tikv-jemallocator = { version = "0.6", optional = true }
libselinux-sys = { version = "0.7", optional = true }

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.nexispm.version-resolution-examples]
description = """
Smart version resolution examples in package TOML:

# Resolve to latest semantic version tag
[[packages]]
name = "firefox"
version = "latest"
source = "https://github.com/mozilla/firefox.git"

# Semantic version ranges
[[packages]]
name = "rust"
version = "^1.70"
source = "https://github.com/rust-lang/rust.git"

[[packages]]
name = "linux"
version = "~6.10.0"
source = "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git"

# Explicit branch or commit
[[packages]]
name = "bleeding-edge-app"
version = "main"
source = "https://github.com/company/app.git"

[[packages]]
name = "pinned-app"
version = "abc123def456"
source = "https://github.com/company/stable-app.git"

# External registry providers (via version-providers)
[[packages]]
name = "numpy"
version = "latest"
provider = "pypi"     # Resolve via PyPI JSON API

[[packages]]
name = "express"
version = "^4.0"
provider = "npm"      # Resolve via npm registry

[[packages]]
name = "serde"
version = "^1.0"
provider = "cratesio" # Resolve via crates.io

[nexis.version_resolution]
cache_duration_hours = 24
prefer_tags = true
fallback_to_branch = "main"
tag_patterns = ["v{version}", "{name}-{version}", "release-{version}"]
"""

[profile.release]
lto = "thin"
codegen-units = 1
panic = "abort"
opt-level = 3

[profile.release-with-debug]
inherits = "release"
debug = true
strip = false

[profile.dev]
debug = 2
overflow-checks = true
opt-level = 1

[profile.bench]
inherits = "release"
debug = true

[[bench]]
name = "store_operations"
harness = false
